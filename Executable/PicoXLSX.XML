<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PicoXLSX</name>
    </assembly>
    <members>
        <member name="T:PicoXLSX.Cell">
            <summary>
            Class representing a cell of a worksheet
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor(System.Object,PicoXLSX.Cell.CellType)">
            <summary>
            Constructor with value and cell type
            </summary>
            <param name="value">Value of the cell</param>
            <param name="type">Type of the cell</param>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor(System.Object,PicoXLSX.Cell.CellType,System.Int32,System.Int32)">
            <summary>
            Constructor with value, cell type, row address and column address
            </summary>
            <param name="value">Value of the cell</param>
            <param name="type">Type of the cell</param>
            <param name="column">Column address of the cell (zero-based)</param>
            <param name="row">Row address of the cell (zero-based)</param>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellType">
            <summary>
            Method resets the Cell type an tries to find the actual type. This is used if a Cell was created with the CellType DEFAULT. CellTypes FORMULA and EMPTY will skip this method
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellAddress">
            <summary>
            Gets the cell Address as string in the format A1 - XFD1048576
            </summary>
            <returns>Cell address</returns>
        </member>
        <member name="M:PicoXLSX.Cell.SetStyle(PicoXLSX.Style,PicoXLSX.Workbook)">
            <summary>
            Sets the style of the cell
            </summary>
            <param name="style">Style to assign</param>
            <param name="workbookReference">Workbook reference. All styles will be managed in this workbook</param>
            <returns>If the passed style already exists in the workbook, the existing one will be returned, otherwise the passed one</returns>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style cannot be referenced or no style was defined</exception>
        </member>
        <member name="M:PicoXLSX.Cell.RemoveStyle(PicoXLSX.Workbook)">
            <summary>
            Removes the assigned style from the cell
            </summary>
            <param name="workbookReference">Workbook reference. All styles will be managed in this workbook</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style cannot be referenced</exception>
        </member>
        <member name="M:PicoXLSX.Cell.CompareTo(PicoXLSX.Cell)">
            <summary>
            Implemented CompareTo method
            </summary>
            <param name="other">Object to compare</param>
            <returns>0 if values are the same, -1 if this object is smaller, 1 if it is bigger</returns>
        </member>
        <member name="M:PicoXLSX.Cell.ConvertArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts a List of supported objects into a list of cells
            </summary>
            <typeparam name="T">Generic data type</typeparam>
            <param name="list">List of generic objects</param>
            <returns>List of cells</returns>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(System.String)">
            <summary>
            Gets a list of cell addresses from a cell range (format A1:B3 or AAD556:AAD1000)
            </summary>
            <param name="range">Range to process</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a part of the passed range is malformed</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the range is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(System.String,System.String)">
            <summary>
            Get a list of cell addresses from a cell range
            </summary>
            <param name="startAddress">Start address as string in the format A1 - XFD1048576</param>
            <param name="endAddress">End address as string in the format A1 - XFD1048576</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a part of the passed range is malformed</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the range is out of range (A-XFD and 1 to 1048576) </exception> 
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a list of cell addresses from a cell range
            </summary>
            <param name="startColumn">Start column (zero based)</param>
            <param name="startRow">Start row (zero based)</param>
            <param name="endColumn">End column (zero based)</param>
            <param name="endRow">End row (zero based)</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the value of one passed address parts is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Get a list of cell addresses from a cell range
            </summary>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a part of the passed addresses is malformed</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the value of one passed address is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellRange(System.String)">
            <summary>
            Resolves a cell range from the format like  A1:B3 or AAD556:AAD1000
            </summary>
            <param name="range">Range to process</param>
            <returns>Range object</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the start or end address was malformed</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the range is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellAddress(System.Int32,System.Int32)">
            <summary>
            Gets the address of a cell by the column and row number (zero based)
            </summary>
            <param name="column">Column address of the cell (zero-based)</param>
            <param name="row">Row address of the cell (zero-based)</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the start or end address was out of range</exception>
            <returns>Cell Address as string in the format A1 - XFD1048576</returns>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellCoordinate(System.String,System.Int32@,System.Int32@)">
            <summary>
            Gets the column and row number (zero based) of a cell by the address
            </summary>
            <param name="address">Address as string in the format A1 - XFD1048576</param>
            <param name="column">Column address of the cell (zero-based) as out parameter</param>
            <param name="row">Row address of the cell (zero-based) as out parameter</param>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the range address was malformed</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the row or column address was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveColumn(System.String)">
            <summary>
            Gets the column number from the column address (A - XFD)
            </summary>
            <param name="columnAddress">Column address (A - XFD)</param>
            <returns>Column number (zero-based)</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed address was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveColumnAddress(System.Int32)">
            <summary>
            Gets the column address (A - XFD)
            </summary>
            <param name="columnNumber">Column number (zero-based)</param>
            <returns>Column address (A - XFD)</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed column number was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Cell.SetCellLockedState(System.Boolean,System.Boolean,PicoXLSX.Workbook)">
            <summary>
            Sets the lock state of the cell
            </summary>
            <param name="isLocked">If true, the cell will be locked if the worksheet is protected</param>
            <param name="isHidden">If true, the value of the cell will be invisible if the worksheet is protected</param>
            <param name="workbookReference">Workbook reference. Locking of cells uses styles which are managed in the workbook</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style used to lock cells cannot be referenced</exception>
            <remarks>The listed exception should never happen because the mentioned style is internally generated</remarks>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellCoordinate(System.String)">
            <summary>
            Gets the column and row number (zero based) of a cell by the address
            </summary>
            <param name="address">Address as string in the format A1 - XFD1048576</param>
            <returns>Struct with row and column</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed address is malformed</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the value of the passed address is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="P:PicoXLSX.Cell.RowAddress">
            <summary>Number of the row (zero-based)</summary>
        </member>
        <member name="P:PicoXLSX.Cell.ColumnAddress">
            <summary>Number of the column (zero-based)</summary>
        </member>
        <member name="P:PicoXLSX.Cell.Value">
            <summary>Value of the cell (generic object type)</summary>
        </member>
        <member name="P:PicoXLSX.Cell.Fieldtype">
            <summary>Type of the cell</summary>
        </member>
        <member name="P:PicoXLSX.Cell.CellStyle">
            <summary>
            Assigned style of the cell
            </summary>
        </member>
        <member name="P:PicoXLSX.Cell.CellAddress">
            <summary>Combined cell address as struct (read-only)</summary>
        </member>
        <member name="T:PicoXLSX.Cell.CellType">
            <summary>
            Enum defines the basic data types of a cell
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.STRING">
            <summary>Type for single characters and strings</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.NUMBER">
            <summary>Type for all numeric types (integers and floats, respectively doubles)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.DATE">
            <summary>Type for dates and times</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.BOOL">
            <summary>Type for boolean</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.FORMULA">
            <summary>Type for Formulas (The cell will be handled differently)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.EMPTY">
            <summary>Type for empty cells. This type is only used for merged cells (all cells except the first of the cell range)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.DEFAULT">
            <summary>Default Type, not specified</summary>
        </member>
        <member name="T:PicoXLSX.Cell.Address">
            <summary>
            Struct representing the cell address as column and row (zero based)
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Address.Row">
            <summary>
            Row number (zero based)
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Address.Column">
            <summary>
            Column number (zero based)
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.Address.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor with arguments
            </summary>
            <param name="column">Column number (zero based)</param>
            <param name="row">Row number (zero based)</param>
        </member>
        <member name="M:PicoXLSX.Cell.Address.GetAddress">
            <summary>
            Returns the combined Address
            </summary>
            <returns>Address as string in the format A1 - XFD1048576</returns>
        </member>
        <member name="M:PicoXLSX.Cell.Address.ToString">
            <summary>
            Overwritten ToString method
            </summary>
            <returns>Returns the cell address (e.g. 'A15')</returns>
        </member>
        <member name="T:PicoXLSX.Cell.Range">
            <summary>
            Struct representing a cell range with a start and end address
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Range.StartAddress">
            <summary>
            Start address of the range
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Range.EndAddress">
            <summary>
            End address of the range
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.Range.#ctor(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Constructor with arguments
            </summary>
            <param name="start">Start address of the range</param>
            <param name="end">End address of the range</param>
        </member>
        <member name="M:PicoXLSX.Cell.Range.ToString">
            <summary>
            Overwritten ToString method
            </summary>
            <returns>Returns the range (e.g. 'A1:B12')</returns>
        </member>
        <member name="T:PicoXLSX.OutOfRangeException">
            <summary>
            Class for exceptions regarding out-of-range incidents
            </summary>
        </member>
        <member name="M:PicoXLSX.OutOfRangeException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.OutOfRangeException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="T:PicoXLSX.FormatException">
            <summary>
            Class for exceptions regarding format error incidents
            </summary>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with passed message and inner exception
            </summary>
            <param name="message">Message of the exception</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:PicoXLSX.IOException">
            <summary>
            Class for exceptions regarding stream or save error incidents
            </summary>
        </member>
        <member name="M:PicoXLSX.IOException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.IOException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:PicoXLSX.IOException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with passed message and inner exception
            </summary>
            <param name="message">Message of the exception</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:PicoXLSX.WorksheetNameAlreadxExistsException">
            <summary>
            Class for exceptions regarding an already existing worksheet (same name)
            </summary>
        </member>
        <member name="M:PicoXLSX.WorksheetNameAlreadxExistsException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.WorksheetNameAlreadxExistsException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="T:PicoXLSX.UnknownWorksheetException">
            <summary>
            Class for exceptions regarding an unknown worksheet (name not found)
            </summary>
        </member>
        <member name="M:PicoXLSX.UnknownWorksheetException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.UnknownWorksheetException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="T:PicoXLSX.UndefinedStyleException">
            <summary>
            Class for exceptions regarding undefined Styles
            </summary>
        </member>
        <member name="M:PicoXLSX.UndefinedStyleException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.UndefinedStyleException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="T:PicoXLSX.UnknownRangeException">
            <summary>
            Class for exceptions regarding unknown cell ranges
            </summary>
        </member>
        <member name="M:PicoXLSX.UnknownRangeException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.UnknownRangeException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="T:PicoXLSX.LowLevel">
            <summary>
            Class for low level handling (XML, formatting, packing)
            </summary>
            <remarks>This class is only for internal use. Use the high level API (e.g. class Workbook) to manipulate data and create Excel files</remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.#ctor(PicoXLSX.Workbook)">
            <summary>
            Constructor with defined workbook object
            </summary>
            <param name="workbook">Workbook to process</param>
        </member>
        <member name="M:PicoXLSX.LowLevel.Save">
            <summary>
            Method to save the workbook
            </summary>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if one of the styles of the workbook cannot be referenced or is null</exception>
            <remarks>The UndefinedStyleException should never happen in this state if the internally managed style collection was not tampered. </remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateWorksheetPart(PicoXLSX.Worksheet)">
            <summary>
            Method to create a worksheet part as XML document
            </summary>
            <param name="worksheet">worksheet object to process</param>
            <returns>Formated XML document</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleSheetDocument">
            <summary>
            Method to create a style sheet as XML document
            </summary>
            <returns>Formated XML document</returns>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if one of the styles cannot be referenced or is null</exception>
            <remarks>The UndefinedStyleException should never happen in this state if the internally managed style collection was not tampered. </remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateAppPropertiesDocument">
            <summary>
            Method to create the app-properties (part of meta data) as XML document
            </summary>
            <returns>Formated XML document</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateCorePropertiesDocument">
            <summary>
            Method to create the core-properties (part of meta data) as XML document
            </summary>
            <returns>Formated XML document</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateWorkbookDocument">
            <summary>
            Method to create a workbook as XML document
            </summary>
            <returns>Formated XML document</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if an address was out of range</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleSheetDocumentFallback">
            <summary>
            Method to create a style sheet as XML document (OBSOLETE / fall-back method)
            </summary>
            <returns>Formated XML document</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateSharedStringsDocument">
            <summary>
            Method to create shared strings as XML document
            </summary>
            <returns>Formated XML document</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.GetSortedSheetData(PicoXLSX.Worksheet)">
            <summary>
            Method to sort the cells of a worksheet as preparation for the XML document
            </summary>
            <param name="sheet">Worksheet to process</param>
            <returns>Two dimensional array of Cell objects</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateRowString(System.Collections.Generic.List{PicoXLSX.Cell},PicoXLSX.Worksheet)">
            <summary>
            Method to create a row string
            </summary>
            <param name="columnFields">List of cells</param>
            <param name="worksheet">Worksheet to process</param>
            <returns>Formated row string</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateMergedCellsString(PicoXLSX.Worksheet)">
            <summary>
            Method to create the merged cells string of the passed worksheet
            </summary>
            <param name="sheet">Worksheet to process</param>
            <returns>Formated string with merged cell ranges</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateSheetProtectionString(PicoXLSX.Worksheet)">
            <summary>
            Method to create the protection string of the passed worksheet
            </summary>
            <param name="sheet">Worksheet to process</param>
            <returns>Formated string with protection statement of the worksheet</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateAppString">
            <summary>
            Method to create the XML string for the app-properties document
            </summary>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateCorePropertiesString">
            <summary>
            Method to create the XML string for the core-properties document
            </summary>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleFontString(System.Collections.Generic.List{PicoXLSX.Style.Font})">
            <summary>
            Method to create the XML string for the font part of the style sheet document
            </summary>
            <param name="fontStyles">List of Style.Font objects</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleBorderString(System.Collections.Generic.List{PicoXLSX.Style.Border})">
            <summary>
            Method to create the XML string for the border part of the style sheet document
            </summary>
            <param name="borderStyles">List of Style.Border objects</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleFillString(System.Collections.Generic.List{PicoXLSX.Style.Fill})">
            <summary>
            Method to create the XML string for the fill part of the style sheet document
            </summary>
            <param name="fillStyles">List of Style.Fill objects</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateMruColorsString(System.Collections.Generic.List{PicoXLSX.Style.Font},System.Collections.Generic.List{PicoXLSX.Style.Fill})">
            <summary>
            Method to create the XML string for the color-MRU part of the style sheet document (recent colors)
            </summary>
            <param name="fills">List of Style.Fill objects</param>
            <param name="fonts">List of Style.Font objects</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleXfsString(System.Collections.Generic.List{PicoXLSX.Style})">
            <summary>
            Method to create the XML string for the Xf part of the style sheet document
            </summary>
            <param name="styles">List of Style objects</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateColsString(PicoXLSX.Worksheet)">
            <summary>
            Method to create the columns as XML string. This is used to define the width of columns
            </summary>
            <param name="worksheet">Worksheet to process</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleNumberFormatString(System.Collections.Generic.List{PicoXLSX.Style.NumberFormat},System.Int32@)">
            <summary>
            Method to create the XML string for the number format part of the style sheet document 
            </summary>
            <param name="numberFormatStyles">List of Style.NumberFormat objects</param>
            <param name="counter">Out-parameter for the number of custom number formats</param>
            <returns>String with formated XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateUniqueName(System.Int32)">
            <summary>
            Creates an unique, random string with the stated length
            </summary>
            <param name="length">Lenth of the name in characters</param>
            <returns>Unique (random) name</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.AppendXMLtag(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Method to append a simple XML tag with an enclosed value to the passed StringBuilder
            </summary>
            <param name="sb">StringBuilder to append</param>
            <param name="value">Value of the XML element</param>
            <param name="tagName">Tag name of the XML element</param>
            <param name="nameSpace">Optional XML name space. Can be empty or null</param>
            <returns>Returns false if no tag was appended, because the value or tag name was null or empty</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.WriteXMLStream(System.IO.MemoryStream,System.Xml.XmlDocument)">
            <summary>
            Method to write an XML document to a MemoryStream
            </summary>
            <param name="stream">Stream to write the XML document</param>
            <param name="document">XML document to process</param>
        </member>
        <member name="M:PicoXLSX.LowLevel.EscapeXMLChars(System.String)">
            <summary>
            Method to escape XML characters between two XML tags
            </summary>
            <param name="input">Input string to process</param>
            <returns>Escaped string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.EscapeXMLAttributeChars(System.String)">
            <summary>
            Method to escape XML characters in an XML attribute
            </summary>
            <param name="input">Input string to process</param>
            <returns>Escaped string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CopyStream(System.IO.MemoryStream,System.IO.Stream)">
            <summary>
            Method to copy a memory stream into another memory stream
            </summary>
            <param name="sourceStream">Source stream</param>
            <param name="targetStream">Target stream</param>
            <exception cref="T:PicoXLSX.IOException">Throws a IOException if the memory stream could not be copied</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.GetOADateTimeString(System.DateTime)">
            <summary>
            Method to convert a date or date and time into the Excel time format
            </summary>
            <param name="date">Date to process</param>
            <returns>Date or date and time as Number</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed date cannot be translated to OADate format</exception>
            <remarks>OA Date format starts at January 1st 1900 (actually 00.01.1900). Dates beyond this date cannot be handled by Excel under normal circumstances</remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.GeneratePasswordHash(System.String)">
            <summary>
            Method to generate an Excel internal password hash to protect workbooks or worksheets<br></br>This method is derived from the c++ implementation by Kohei Yoshida (<a href="http://kohei.us/2008/01/18/excel-sheet-protection-password-hash/">http://kohei.us/2008/01/18/excel-sheet-protection-password-hash/</a>)
            </summary>
            <remarks>WARNING! Do not use this method to encrypt 'real' passwords or data outside from PicoXLSX. This is only a minor security feature. Use a proper cryptography method instead.</remarks>
            <param name="password">Password string in UTF-8 to encrypt</param>
            <returns>16 bit hash as hex string</returns>
        </member>
        <member name="T:PicoXLSX.LowLevel.SortedMap">
            <summary>
            Class to manage key value pairs (string / string). The entries are ordered like they were added
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.Add(System.String,System.String)">
            <summary>
            Method to add a key value pair
            </summary>
            <param name="key">Key as string</param>
            <param name="value">Value as string</param>
            <returns>Returns the index of the inserted or replaced entry in the map</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.ContainsKey(System.String)">
            <summary>
            Gets whether the specified key exists in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if the entry exists, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.Clear">
            <summary>
            Removes all entries
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.Keys">
            <summary>
            Gets a list of key
            </summary>
            <returns>Keys of the map</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.Values">
            <summary>
            Gets a List of Values
            </summary>
            <returns>Values of the map</returns>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Count">
            <summary>
            Gets the number of entries in the map
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Item(System.String)">
            <summary>
            Indexer to get the specific value by the key
            </summary>
        </member>
        <member name="T:PicoXLSX.LowLevel.SortedMap.Tuple">
            <summary>
            Sub-Class to manage string/string tuples 
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.Tuple.#ctor(System.String,System.String)">
            <summary>
            Default constructor with parameters
            </summary>
            <param name="key">Key of the tuple</param>
            <param name="value">Value of the tuple</param>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Tuple.Key">
            <summary>
            Key of the tuple
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Tuple.Value">
            <summary>
            Value of the tuple
            </summary>
        </member>
        <member name="T:PicoXLSX.LowLevel.DocumentPath">
            <summary>
            Class to manage XML document paths
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.DocumentPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.DocumentPath.#ctor(System.String,System.String)">
            <summary>
            Constructor with defined file name and path
            </summary>
            <param name="filename">File name of the document</param>
            <param name="path">Path of the document</param>
        </member>
        <member name="M:PicoXLSX.LowLevel.DocumentPath.GetFullPath">
            <summary>
            Method to return the full path of the document
            </summary>
            <returns>Full path</returns>
        </member>
        <member name="P:PicoXLSX.LowLevel.DocumentPath.Filename">
            <summary>
            File name of the document
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.DocumentPath.Path">
            <summary>
            Path of the document
            </summary>
        </member>
        <member name="T:PicoXLSX.Metadata">
            <summary>
            Class representing the meta data of a workbook
            </summary>
        </member>
        <member name="M:PicoXLSX.Metadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Metadata.ParseVersion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method to parse a common version (major.minor.revision.build) into the compatible format (major.minor). The minimum value is 0.0 and the maximum value is 99999.99999<br></br>
            The minor, revision and build number are joined if possible. If the number is to long, the additional characters will be removed from the right side down to five characters (e.g. 785563 will be 78556)
            </summary>
            <param name="major">Major number from 0 to 99999</param>
            <param name="minor">Minor number</param>
            <param name="build">Build number</param>
            <param name="revision">Revision number</param>
            <returns>Formated version number (e.g. 1.0 or 55.987)</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the major number is to long or one of the numbers is negative</exception>
        </member>
        <member name="M:PicoXLSX.Metadata.CheckVersion">
            <summary>
            Checks the format of the passed version string
            </summary>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the version string is malformed</exception>
        </member>
        <member name="P:PicoXLSX.Metadata.UseColorMRU">
            <summary>
            If true, custom defined colors (in styles) will be added as recent colors (MRU)
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Title">
            <summary>
            Title of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Subject">
            <summary>
            Subject of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Creator">
            <summary>
            Creator of the workbook. Add more than one creator by using the semicolon (;) between the authors
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Keywords">
            <summary>
            Keywords for the workbook. Separate the keywords with semicolons (;)
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Application">
            <summary>
            Application which created the workbook. Default is PicoXLSX
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.ApplicationVersion">
            <summary>
            Version of the creation application. Default is the library version of PicoXLSX. Use the format xxxxx.yyyyy (e.g. 1.0 or 55.9875) in case of a custom value.
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Description">
            <summary>
            Description of the document or comment about it
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Category">
            <summary>
            Category of the document. There are no predefined values or restrictions about the content of this field
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.ContentStatus">
            <summary>
            Status of the document. There are no predefined values or restrictions about the content of this field
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Manager">
            <summary>
            Responsible manager of the document. This value is for organizational purpose.
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Company">
            <summary>
            Company owning the document. This value is for organizational purpose. Add more than one manager by using the semicolon (;) between the words
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.HyperlinkBase">
            <summary>
            Hyper-link base of the document.
            </summary>
        </member>
        <member name="T:PicoXLSX.Style">
            <summary>
            Class representing a Style with sub classes within a style sheet. An instance of this class is only a container for the different sub-classes. These sub-classes contains the actual styling information.
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.#ctor(System.String)">
            <summary>
            Constructor with definition of the style name
            </summary>
            <param name="name">Name of the style</param>
        </member>
        <member name="M:PicoXLSX.Style.Equals(PicoXLSX.Style)">
            <summary>
            Method to determine the equality of two objects
            </summary>
            <param name="other">Object to compare against this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.CompareTo(PicoXLSX.Style)">
            <summary>
            method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.Style.Copy">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.Copy(PicoXLSX.Style.NumberFormat)">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <param name="overwriteFormat">NumberFormat object to replace the original object of the current object in the copy</param>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="P:PicoXLSX.Style.CurrentFont">
            <summary>
            Current Font object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentFill">
            <summary>
            Current Fill object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentBorder">
            <summary>
            Current Border object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentNumberFormat">
            <summary>
            Current NumberFormat object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentCellXf">
            <summary>
            Current CellXf object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.InternalID">
            <summary>
            Internal ID for sorting purpose
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Name">
            <summary>
            Name of the style. If not defined, a random name will be generated when the style is created
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf">
            <summary>
            Class representing an XF entry. The XF entry is used to make reference to other style instances like Border oder Fill and for the positioning of the cell content
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.CalculateInternalRotation">
            <summary>
            Method to calculate the internal text rotation. The text direction and rotation are handled internally by the text rotation value
            </summary>
            <returns>Returns the valid rotation in degrees for internal uses (LowLevel)</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the rotation angle (-90 to 90) is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.Equals(PicoXLSX.Style.CellXf)">
            <summary>
            Method to determine the equality of two objects
            </summary>
            <param name="other">Object to compare against this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.CompareTo(PicoXLSX.Style.CellXf)">
            <summary>
            method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.Copy">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.Locked">
            <summary>
            If true, the style is used for locking / protection of cells or worksheets
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.Hidden">
            <summary>
            If true, the style is used for hiding cell values / protection of cells
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.HorizontalAlign">
            <summary>
            Horizontal alignment of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.VerticalAlign">
            <summary>
            Vertical alignment of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.Alignment">
            <summary>
            Text break options of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.InternalID">
            <summary>
            Internal ID for sorting purpose
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.TextRotation">
            <summary>
            Text rotation in degrees (from +90 to -90)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.TextDirection">
            <summary>
            Direction of the text within the cell
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.ForceApplyAlignment">
            <summary>
            If true, the applyAlignment value of the style will be set to true (used to merge cells)
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.HorizontalAlignValue">
            <summary>
            Enum for the horizontal alignment of a cell 
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.left">
            <summary>Content will be aligned left</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.center">
            <summary>Content will be aligned in the center</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.right">
            <summary>Content will be aligned right</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.fill">
            <summary>Content will fill up the cell</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.justify">
            <summary>justify alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.general">
            <summary>General alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.centerContinuous">
            <summary>Center continuous alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.distributed">
            <summary>Distributed alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.none">
            <summary>No alignment. The alignment will not be used in a style</summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.VerticallAlignValue">
            <summary>
            Enum for the vertical alignment of a cell 
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticallAlignValue.bottom">
            <summary>Content will be aligned on the bottom (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticallAlignValue.top">
            <summary>Content will be aligned on the top</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticallAlignValue.center">
            <summary>Content will be aligned in the center</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticallAlignValue.justify">
            <summary>justify alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticallAlignValue.distributed">
            <summary>Distributed alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticallAlignValue.none">
            <summary>No alignment. The alignment will not be used in a style</summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.TextBreakValue">
            <summary>
            Enum for text break options
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextBreakValue.wrapText">
            <summary>Word wrap is active</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextBreakValue.shrinkToFit">
            <summary>Text will be resized to fit the cell</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextBreakValue.none">
            <summary>Text will overflow in cell</summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.TextDirectionValue">
            <summary>
            Enum for the general text alignment direction
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextDirectionValue.horizontal">
            <summary>Text direction is horizontal (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextDirectionValue.vertical">
            <summary>Text direction is vertical</summary>
        </member>
        <member name="T:PicoXLSX.Style.Font">
            <summary>
            Class representing a Font entry. The Font entry is used to define text formatting
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.DEFAULTFONT">
            <summary>
            Default font family as constant
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Font.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Font.Equals(PicoXLSX.Style.Font)">
            <summary>
            Method to determine the equality of two objects
            </summary>
            <param name="other">Object to compare against this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.Font.CompareTo(PicoXLSX.Style.Font)">
            <summary>
            method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.Style.Font.Copy">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="P:PicoXLSX.Style.Font.Size">
            <summary>
            Font size. Valid range is from 8 to 75
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Name">
            <summary>
            Font name (Default is Calibri)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Family">
            <summary>
             Font family (Default is 2)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.ColorTheme">
            <summary>
            Font color theme (Default is 1)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.ColorValue">
            <summary>
            Font color (default is empty)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Scheme">
            <summary>
            Font scheme (Default is minor)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.VerticalAlign">
            <summary>
            Alignment of the font (Default is none)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Bold">
            <summary>
            If true, the font is bold
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Italic">
            <summary>
            If true, the font is italic
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Underline">
            <summary>
            If true, the font has one underline
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.DoubleUnderline">
            <summary>
            If true, the font has a double underline
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Strike">
            <summary>
            If true, the font is stroked through
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Charset">
            <summary>
            Charset of the Font (Default is empty)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.InternalID">
            <summary>
            Internal ID for sorting purpose
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.IsDefaultFont">
            <summary>
            In true the font is equals the default font
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.Font.VerticalAlignValue">
            <summary>
            Enum for the vertical alignment of the text from base line
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.VerticalAlignValue.subscript">
            <summary>Text will be rendered as subscript</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.VerticalAlignValue.superscript">
            <summary>Text will be rendered as superscript</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.VerticalAlignValue.none">
            <summary>Text will be rendered normal</summary>
        </member>
        <member name="T:PicoXLSX.Style.Font.SchemeValue">
            <summary>
            Enum for the font scheme
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.SchemeValue.major">
            <summary>Font scheme is major</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.SchemeValue.minor">
            <summary>Font scheme is minor (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.SchemeValue.none">
            <summary>No Font scheme is used</summary>
        </member>
        <member name="T:PicoXLSX.Style.Fill">
            <summary>
            Class representing a Fill (background) entry. The Fill entry is used to define background colors and fill patterns
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.DEFAULTCOLOR">
            <summary>
            Default Color (foreground or background) as constant
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Fill.GetPatternName(PicoXLSX.Style.Fill.PatternValue)">
            <summary>
            Gets the pattern name from the enum
            </summary>
            <param name="pattern">Enum to process</param>
            <returns>The valid value of the pattern as String</returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Fill.#ctor(System.String,System.String)">
            <summary>
            Constructor with foreground and background color
            </summary>
            <param name="forground">Foreground color of the fill</param>
            <param name="background">Background color of the fill</param>
        </member>
        <member name="M:PicoXLSX.Style.Fill.#ctor(System.String,PicoXLSX.Style.Fill.FillType)">
            <summary>
            Constructor with color value and fill type
            </summary>
            <param name="value">Color value</param>
            <param name="filltype">Fill type (fill or pattern)</param>
        </member>
        <member name="M:PicoXLSX.Style.Fill.SetColor(System.String,PicoXLSX.Style.Fill.FillType)">
            <summary>
            Seth the color an the depending fill type
            </summary>
            <param name="value">color value</param>
            <param name="filltype">fill type (fill or pattern)</param>
        </member>
        <member name="M:PicoXLSX.Style.Fill.Equals(PicoXLSX.Style.Fill)">
            <summary>
            Method to determine the equality of two objects
            </summary>
            <param name="other">Object to compare against this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.CompareTo(PicoXLSX.Style.Fill)">
            <summary>
            method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.Copy">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="P:PicoXLSX.Style.Fill.IndexedColor">
            <summary>
            Indexed color (Default is 64)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.PatternFill">
            <summary>
            Pattern type of the fill (Default is none)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.ForegroundColor">
            <summary>
            Foreground color of the fill
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.BackgroundColor">
            <summary>
            Background color of the fill
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.InternalID">
            <summary>
            Internal ID for sorting purpose
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.Fill.PatternValue">
            <summary>
            Enum for the pattern values
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.none">
            <summary>No pattern (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.solid">
            <summary>Solid fill (for colors)</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.darkGray">
            <summary>Dark gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.mediumGray">
            <summary>Medium gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.lightGray">
            <summary>Light gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.gray0625">
            <summary>6.25% gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.gray125">
            <summary>12.5% gray fill</summary>
        </member>
        <member name="T:PicoXLSX.Style.Fill.FillType">
            <summary>
            Enum for the type of the color
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.FillType.patternColor">
            <summary>Color defines a pattern color </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.FillType.fillColor">
            <summary>Color defines a solid fill color </summary>
        </member>
        <member name="T:PicoXLSX.Style.Border">
            <summary>
            Class representing a Border entry. The Border entry is used to define frames and cell borders
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Border.GetStyleName(PicoXLSX.Style.Border.StyleValue)">
            <summary>
            Gets the border style name from the enum
            </summary>
            <param name="style">Enum to process</param>
            <returns>The valid value of the border style as String</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Border.Equals(PicoXLSX.Style.Border)">
            <summary>
            Method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.IsEmpty">
            <summary>
            Method to determine whether the object has no values but the default values (means: is empty and must not be processed)
            </summary>
            <returns>True if empty, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.CompareTo(PicoXLSX.Style.Border)">
            <summary>
            Method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.Copy">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="P:PicoXLSX.Style.Border.LeftStyle">
            <summary>
            Style of left cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.RightStyle">
            <summary>
            Style of right cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.TopStyle">
            <summary>
            Style of top cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.BottomStyle">
            <summary>
            Style of bottom cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalStyle">
            <summary>
            Style of the diagonal lines
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalDown">
            <summary>
            If true, the downwards diagonal line is used
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalUp">
            <summary>
            If true, the upwards diagonal line is used
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.LeftColor">
            <summary>
            Color code (ARGB) of the left border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.RightColor">
            <summary>
            Color code (ARGB) of the right border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.TopColor">
            <summary>
            Color code (ARGB) of the top border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.BottomColor">
            <summary>
            Color code (ARGB) of the bottom border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalColor">
            <summary>
            Color code (ARGB) of the diagonal lines
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.InternalID">
            <summary>
            Internal ID for sorting purpose
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.Border.StyleValue">
            <summary>
            Enum for the border style
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.none">
            <summary>no border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.hair">
            <summary>hair border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dotted">
            <summary>dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dashDotDot">
            <summary>dashed border with double-dots</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dashDot">
            <summary>dash-dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dashed">
            <summary>dashed border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.thin">
            <summary>thin border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.mediumDashDotDot">
            <summary>medium-dashed border with double-dots</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.slantDashDot">
            <summary>slant dash-dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.mediumDashDot">
            <summary>medium dash-dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.mediumDashed">
            <summary>medium dashed border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.medium">
            <summary>medium border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.thick">
            <summary>thick border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.s_double">
            <summary>double border</summary>
        </member>
        <member name="T:PicoXLSX.Style.NumberFormat">
            <summary>
            Class representing a NumberFormat entry. The NumberFormat entry is used to define cell formats like currency or date
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.CUSTOMFORMAT_START_NUMBER">
            <summary>
            Start ID for custom number formats as constant
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.Equals(PicoXLSX.Style.NumberFormat)">
            <summary>
            Method to determine the equality of two objects
            </summary>
            <param name="other">Object to compare against this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.CompareTo(PicoXLSX.Style.NumberFormat)">
            <summary>
            method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.Copy">
            <summary>
            Method to copy the current object to a new one
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.Number">
            <summary>
            Format number. Set this to custom (164) in case of custom number formats
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.CustomFormatID">
            <summary>
            Format number of the custom format. Must be higher or equal then predefined custom number (164) 
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.CustomFormatCode">
            <summary>
            Custom format code in the notation of Excel
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.IsCustomFormat">
            <summary>
            Returns true in case of a custom format (higher or equals 164)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.InternalID">
            <summary>
            Internal ID for sorting purpose
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.NumberFormat.FormatNumber">
            <summary>
            Enum for predefined number formats
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.none">
            <summary>No format / Default</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_1">
            <summary>Format: 0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_2">
            <summary>Format: 0.00</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_3">
            <summary>Format: #,##0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_4">
            <summary>Format: #,##0.00</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_5">
            <summary>Format: $#,##0_);($#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_6">
            <summary>Format: $#,##0_);[Red]($#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_7">
            <summary>Format: $#,##0.00_);($#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_8">
            <summary>Format: $#,##0.00_);[Red]($#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_9">
            <summary>Format: 0%</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_10">
            <summary>Format: 0.00%</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_11">
            <summary>Format: 0.00E+00</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_12">
            <summary>Format: # ?/?</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_13">
            <summary>Format: # ??/??</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_14">
            <summary>Format: m/d/yyyy</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_15">
            <summary>Format: d-mmm-yy</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_16">
            <summary>Format: d-mmm</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_17">
            <summary>Format: mmm-yy</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_18">
            <summary>Format: mm AM/PM</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_19">
            <summary>Format: h:mm:ss AM/PM</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_20">
            <summary>Format: h:mm</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_21">
            <summary>Format: h:mm:ss</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_22">
            <summary>Format: m/d/yyyy h:mm</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_37">
            <summary>Format: #,##0_);(#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_38">
            <summary>Format: #,##0_);[Red](#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_39">
            <summary>Format: #,##0.00_);(#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_40">
            <summary>Format: #,##0.00_);[Red](#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_45">
            <summary>Format: mm:ss</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_46">
            <summary>Format: [h]:mm:ss</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_47">
            <summary>Format: mm:ss.0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_48">
            <summary>Format: ##0.0E+0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_49">
            <summary>Format: #</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.custom">
            <summary>Custom Format (ID 164 and higher)</summary>
        </member>
        <member name="T:PicoXLSX.Style.BasicStyles">
            <summary>
            Factory class with the most important predefined styles
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.BasicStyles.GetStyle(PicoXLSX.Style.BasicStyles.StyleEnum)">
            <summary>
            Method to maintain the styles and to create singleton instances
            </summary>
            <param name="value">Enum value to maintain</param>
            <returns>The style according to the passed enum value</returns>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Bold">
            <summary>Gets the bold style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Italic">
            <summary>Gets the italic style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.BoldItalic">
            <summary>Gets the bold and italic style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Underline">
            <summary>Gets the underline style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.DoubleUnderline">
            <summary>Gets the double underline style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Strike">
            <summary>Gets the strike style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.DateFormat">
            <summary>Gets the date format style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.RoundFormat">
            <summary>Gets the round format style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.BorderFrame">
            <summary>Gets the border frame style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.BorderFrameHeader">
            <summary>Gets the border style for header cells</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.DottedFill_0_125">
            <summary>Gets the special pattern fill style (for compatibility)</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.MergeCellStyle">
            <summary>Gets the style used when merging cells</summary>
        </member>
        <member name="T:PicoXLSX.Style.BasicStyles.StyleEnum">
            <summary>
            Enum with style selection
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.bold">
            <summary>Format text bold</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.italic">
            <summary>Format text italic</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.boldItalic">
            <summary>Format text bold and italic</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.underline">
            <summary>Format text with an underline</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.doubleUnderlien">
            <summary>Format text with a double underline</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.strike">
            <summary>Format text with a strike-through</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.dateFormat">
            <summary>Format number as date</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.roundFormat">
            <summary>Rounds number as an integer</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.borderFrame">
            <summary>Format cell with a thin border</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.borderFrameHeader">
            <summary>Format cell with a thin border and a thick bottom line as header cell</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.dottedFill_0_125">
            <summary>Special pattern fill style for compatibility purpose </summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.mergeCellStyle">
            <summary>Style to apply on merged cells </summary>
        </member>
        <member name="T:PicoXLSX.NamespaceDoc">
            <summary>
            PicoXLSX is a library to generate XLSX files in a easy and native way
            </summary>
        </member>
        <member name="T:PicoXLSX.Workbook">
            <summary>
            Class representing a workbook
            </summary>
            
        </member>
        <member name="M:PicoXLSX.Workbook.#ctor(System.Boolean)">
            <summary>
            Default Constructor with additional parameter to create a default worksheet
            </summary>
            <param name="createWorkSheet">If true, a default worksheet will be crated and set as default worksheet</param>
        </member>
        <member name="M:PicoXLSX.Workbook.#ctor(System.String,System.String)">
            <summary>
            Constructor with filename ant the name of the first worksheet
            </summary>
            <param name="filename">Filename of the workbook</param>
            <param name="sheetName">Name of the first worksheet</param>
        </member>
        <member name="M:PicoXLSX.Workbook.AddWorksheet(System.String)">
            <summary>
            Adding a new Worksheet
            </summary>
            <param name="name">Name of the new worksheet</param>
            <exception cref="T:PicoXLSX.WorksheetNameAlreadxExistsException">Throws a WorksheetNameAlreadxExistsException if the name of the worksheet already exists</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the name contains illegal characters or is out of range (length between 1 an 31 characters)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetCurrentWorksheet(System.String)">
            <summary>
            Sets the current worksheet
            </summary>
            <param name="name">Name of the worksheet</param>
            <returns>Returns the current worksheet</returns>
            <exception cref="T:PicoXLSX.UnknownWorksheetException">Throws a UnknownWorksheetException if the name of the worksheet is unknown</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetSelectedWorksheet(System.Int32)">
            <summary>
            Sets the selected worksheet in the output workbook
            </summary>
            <remarks>This method does not set the current worksheet while design time. Use SetCurrentWorksheet instead for this</remarks>
            <param name="worksheetIndex">Zero-based worksheet index</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws a OutOfRangeException if the index of the worksheet is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetSelectedWorksheet(PicoXLSX.Worksheet)">
            <summary>
            Sets the selected worksheet in the output workbook
            </summary>
            <remarks>This method does not set the current worksheet while design time. Use SetCurrentWorksheet instead for this</remarks>
            <param name="worksheet">Worksheet object (must be in the collection of worksheets)</param>
            <exception cref="T:PicoXLSX.UnknownWorksheetException">Throws a UnknownWorksheetException if the worksheet was not found in the worksheet collection</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveWorksheet(System.String)">
            <summary>
            Removes the defined worksheet
            </summary>
            <param name="name">Name of the worksheet</param>
            <exception cref="T:PicoXLSX.UnknownWorksheetException">Throws a UnknownWorksheetException if the name of the worksheet is unknown</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Sets or removes the workbook protection. If protectWindows and protectStructure are both false, the workbook will not be protected
            </summary>
            <param name="state">If true, the workbook will be protected, otherwise not</param>
            <param name="protectWindows">If true, the windows will be locked if the workbook is protected</param>
            <param name="protectStructure">If true, the structure will be locked if the workbook is protected</param>
            <param name="password">Optional password. If null or empty, no password will be set in case of protection</param>
        </member>
        <member name="M:PicoXLSX.Workbook.AddStyle(PicoXLSX.Style,System.Boolean)">
            <summary>
            Adds a style to the style sheet of the workbook
            </summary>
            <param name="style">Style to add</param>
            <param name="distinct">If true, the passed style will be replaced by an identical style if existing. Otherwise an exception will be thrown in case of a duplicate</param>
            <returns>Returns the added style. In case of an existing style, the distinct style will be returned</returns>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style already exists and parameter 'distinct' is set to false</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(PicoXLSX.Style)">
            <summary>
            Removes the passed style from the style sheet
            </summary>
            <param name="style">Style to remove</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(System.String)">
            <summary>
            Removes the defined style from the style sheet of the workbook
            </summary>
            <param name="styleName">Name of the style to be removed</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(PicoXLSX.Style,System.Boolean)">
            <summary>
            Removes the defined style from the style sheet of the workbook
            </summary>
            <param name="style">Style to remove</param>
            <param name="onlyIfUnused">If true, the style will only be removed if not used in any cell</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(System.String,System.Boolean)">
            <summary>
            Removes the defined style from the style sheet of the workbook
            </summary>
            <param name="styleName">Name of the style to be removed</param>
            <param name="onlyIfUnused">If true, the style will only be removed if not used in any cell</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.ReorganizeStyles(System.Collections.Generic.List{PicoXLSX.Style.Border}@,System.Collections.Generic.List{PicoXLSX.Style.Fill}@,System.Collections.Generic.List{PicoXLSX.Style.Font}@,System.Collections.Generic.List{PicoXLSX.Style.NumberFormat}@,System.Collections.Generic.List{PicoXLSX.Style.CellXf}@)">
            <summary>
            Method to prepare the styles before saving the workbook. Don't use the method otherwise. Styles will be reordered and probably removed from the style sheet
            </summary>
            <param name="borders">Out parameter for a sorted list of Style.Border objects</param>
            <param name="fills">Out parameter for a sorted list of Style.Fill objects</param>
            <param name="fonts">Out parameter for a sorted list of Style.Font objects</param>
            <param name="numberFormats">Out parameter for a sorted list of Style.NumberFormat objects</param>
            <param name="cellXfs">Out parameter for a sorted list of Style.CellXf objects</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if one of the passed style components cannot be referenced or is null</exception>
            <remarks>This method is for internal use but must be public. Otherwise it's not possible to access it from low level methods. Don't use it</remarks>
        </member>
        <member name="M:PicoXLSX.Workbook.ResolveMergedCells">
            <summary>
            Method to resolve all merged cells in all worksheets. Only the value of the very first cell of the locked cells range will be visible. The other values are still present (set to EMPTY) but will not be stored in the worksheet.
            </summary>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if one of the styles of the merged cells cannot be referenced or is null</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.Save">
            <summary>
            Saves the workbook
            </summary>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if one of the styles of the workbook cannot be referenced or is null</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SaveAs(System.String)">
            <summary>
            Saves the workbook with the defined name
            </summary>
            <param name="filename">filename of the saved workbook</param>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if one of the styles of the workbook cannot be referenced or is null</exception>
        </member>
        <member name="P:PicoXLSX.Workbook.SelectedWorksheet">
            <summary>
            Gets the selected worksheet. The selected worksheet is not the current worksheet while design time but the selected sheet in the output file
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.CurrentWorksheet">
            <summary>
            Gets the current worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.Worksheets">
            <summary>
            Gets the list of worksheets in the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.Filename">
            <summary>
            Gets or sets the filename of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.Styles">
            <summary>
            Gets the list of Styles of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.WorkbookMetadata">
            <summary>
            Meta data object of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.UseWorkbookProtection">
            <summary>
            Gets or sets whether the workbook is protected
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.WorkbookProtectionPassword">
            <summary>
            Gets the password used for workbook protection
            </summary>
            <see cref="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)"/>
        </member>
        <member name="P:PicoXLSX.Workbook.LockWindowsIfProtected">
            <summary>
            Gets whether the windows are locked if workbook is protected
            </summary>
            <see cref="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)"/> 
        </member>
        <member name="P:PicoXLSX.Workbook.LockStructureIfProtected">
            <summary>
            Gets whether the structure are locked if workbook is protected
            </summary>
            <see cref="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)"/>
        </member>
        <member name="T:PicoXLSX.Worksheet">
            <summary>
            Class representing a worksheet of a workbook
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.DEFAULT_COLUMN_WIDTH">
            <summary>
            Default column width as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.DEFAULT_ROW_HEIGHT">
            <summary>
            Default row height as constant
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.#ctor(System.String,System.Int32)">
            <summary>
            Constructor with name and sheet ID
            </summary>
            <param name="name">Name of the worksheet</param>
            <param name="id">ID of the worksheet (for internal use)</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCellFormula(System.String)">
            <summary>
            Adds a formula as string to the next cell position
            </summary>
            <param name="formula">Formula to insert</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCell(System.Object)">
            <summary>
            Adds a object to the next cell position. If the type of the value does not match with one of the supported data types, it will be casted to a String
            </summary>
            <remarks>Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <param name="value">Unspecified value to insert</param> 
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCell(PicoXLSX.Cell,System.Boolean)">
            <summary>
            Method to insert a generic cell to the next cell position
            </summary>
            <param name="cell">Cell object to insert</param>
            <param name="incremental">If true, the address value (row or column) will be incremented, otherwise not</param>
            <remarks>Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a object to the defined cell address. If the type of the value does not match with one of the supported data types, it will be casted to a String
            </summary>
            <param name="value">Unspecified value to insert</param>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <remarks>Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(System.Object,System.String)">
            <summary>
            Adds a object to the defined cell address. If the type of the value does not match with one of the supported data types, it will be casted to a String
            </summary>
            <param name="value">Unspecified value to insert</param>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <remarks>Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(PicoXLSX.Cell)">
            <summary>
            Adds a cell object. This object must contain a valid row and column address
            </summary>
            <param name="cell">Cell object to insert</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellFormula(System.String,System.String)">
            <summary>
            Adds a cell formula as string to the defined cell address
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellFormula(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a cell formula as string to the defined cell address
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRange(System.Collections.Generic.List{System.Object},PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Adds a list of object values to a defined cell range. If the type of the a particular value does not match with one of the supported data types, it will be casted to a String
            </summary>
            <param name="values">List of unspecified objects to insert</param>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the number of cells resolved from the range differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cells</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRange(System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Adds a list of object values to a defined cell range. If the type of the a particular value does not match with one of the supported data types, it will be casted to a String
            </summary>
            <param name="values">List of unspecified objects to insert</param>
            <param name="cellRange">Cell range as string in the format like A1:D1 or X10:X22</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the number of cells resolved from the range differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cells</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRangeInternal``1(System.Collections.Generic.List{``0},PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Internal function to add a generic list of value to the defined cell range
            </summary>
            <typeparam name="T">Data type of the generic value list</typeparam>
            <param name="values">List of values</param>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the number of cells differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.UndefinedStyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cells</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveCell(System.Int32,System.Int32)">
            <summary>
            Removes a previous inserted cell at the defined address
            </summary>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <returns>Returns true if the cell could be removed (existed), otherwise false (did not exist)</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveCell(System.String)">
            <summary>
            Removes a previous inserted cell at the defined address
            </summary>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <returns>Returns true if the cell could be removed (existed), otherwise false (did not exist)</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.GoToNextColumn">
            <summary>
            Moves the current position to the next column
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.GoToNextRow">
            <summary>
            Moves the current position to the next row (use for a new line)
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurrentRowAddress(System.Int32)">
            <summary>
            Sets the current row address (row number, zero based)
            </summary>
            <param name="rowAddress">Row number (zero based)</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the address is out of the valid range. Range is from 0 to 1048575 (1048576 rows)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurrentColumnAddress(System.Int32)">
            <summary>
            Sets the current column address (column number, zero based)
            </summary>
            <param name="columnAddress">Column number (zero based)</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the address is out of the valid range. Range is from 0 to 16383 (16384 columns)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurentCellAddress(System.String)">
            <summary>
            Set the current cell address
            </summary>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurentCellAddress(System.Int32,System.Int32)">
            <summary>
            Set the current cell address
            </summary>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if one of the passed cell addresses is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSheetname(System.String)">
            <summary>
            Validates and sets the worksheet name
            </summary>
            <param name="name">Name to set</param>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the sheet name is to long (max. 31) or contains illegal characters [  ]  * ? / \</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetColumnWidth(System.String,System.Single)">
            <summary>
            Sets the width of the passed column address
            </summary>
            <param name="columnAddress">Column address (A - XFD)</param>
            <param name="width">Width from 0 to 255.0</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException:<br></br>a) If the passed column address is out of range<br></br>b) if the column width is out of range (0 - 255.0)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetColumnWidth(System.Int32,System.Single)">
            <summary>
            Sets the width of the passed column number (zero-based)
            </summary>
            <param name="columnNumber">Column number (zero-based, from 0 to 16383)</param>
            <param name="width">Width from 0 to 255.0</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException:<br></br>a) If the passed column number is out of range<br></br>b) if the column width is out of range (0 - 255.0)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetRowHeight(System.Int32,System.Single)">
            <summary>
            Sets the height of the passed row number (zero-based)
            </summary>
            <param name="rowNumber">Row number (zero-based, 0 to 1048575)</param>
            <param name="height">Height from 0 to 409.5</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException:<br></br>a) If the passed row number is out of range<br></br>b) if the row height is out of range (0 - 409.5)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetActiveStyle(PicoXLSX.Style,PicoXLSX.Workbook)">
            <summary>
            Sets the active style of the worksheet. This style will be assigned to all later added cells
            </summary>
            <param name="style">Style to set as active style</param>
            <param name="workbookReference">Reference to the workbook. All stiles are managed in this workbook</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.ClearActiveStyle">
            <summary>
            Clears the active style of the worksheet. All later added calls will contain no style unless another active style is set
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.MergeCells(PicoXLSX.Cell.Range)">
            <summary>
            Merges the defined cell range
            </summary>
            <param name="cellRange">Range to merge</param>
            <returns>Returns the validated range of the merged cells (e.g. 'A1:B12')</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell range is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.MergeCells(System.String)">
            <summary>
            Merges the defined cell range
            </summary>
            <param name="cellRange">Range to merge (e.g. 'A1:B12')</param>
            <returns>Returns the validated range of the merged cells (e.g. 'A1:B12')</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed cell range is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.MergeCells(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Merges the defined cell range
            </summary>
            <param name="startAddress">Start address of the merged cell range</param>
            <param name="endAddress">End address of the merged cell range</param>
            <returns>Returns the validated range of the merged cells (e.g. 'A1:B12')</returns>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if one of the passed cell addresses is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveMergedCells(System.String)">
            <summary>
            Removes the defined merged cell range
            </summary>
            <param name="range">Cell range to remove the merging</param>
            <exception cref="T:PicoXLSX.UnknownRangeException">Throws a UnkownRangeException if the passed cell range was not merged earlier</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddAllowedActionOnSheetProtection(PicoXLSX.Worksheet.SheetProtectionValue)">
            <summary>
            Method to add allowed actions if the worksheet is protected. If one or more values are added, UseSheetProtection will be set to true
            </summary>
            <param name="typeOfProtection">Allowed action on the worksheet or cells</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSheetProtectionPassword(System.String)">
            <summary>
            Sets or removes the password for worksheet protection. If set, UseSheetProtection will be also set to true
            </summary>
            <param name="password">Password (UTF-8) to protect the worksheet. If the password is null or empty, no password will be used</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddHiddenRow(System.Int32)">
            <summary>
            Sets the defined row as hidden
            </summary>
            <param name="rowNumber">Row number to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRange if the passed row number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveHiddenRow(System.Int32)">
            <summary>
            Sets a previously defined, hidden row as visible again
            </summary>
            <param name="rowNumber">Row number to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRange if the passed row number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetRowHiddenState(System.Int32,System.Boolean)">
            <summary>
            Sets the defined row as hidden or visible
            </summary>
            <param name="rowNumber">Row number to make visible again</param>
            <param name="state">If true, the row will be hidden, otherwise visible</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed row number was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddHiddenColumn(System.Int32)">
            <summary>
            Sets the defined column as hidden
            </summary>
            <param name="columnNumber">Column number to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRange if the passed column number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddHiddenColumn(System.String)">
            <summary>
            Sets the defined column as hidden
            </summary>
            <param name="columnAddress">Column address to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRange if the passed column address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveHiddenColumn(System.Int32)">
            <summary>
            Sets a previously defined, hidden column as visible again
            </summary>
            <param name="columnNumber">Column number to make visible again</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRange if the passed column number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveHiddenColumn(System.String)">
            <summary>
            Sets a previously defined, hidden column as visible again
            </summary>
            <param name="columnAddress">Column address to make visible again</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the column address out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetColumnHiddenState(System.Int32,System.Boolean)">
            <summary>
            Sets the defined column as hidden or visible
            </summary>
            <param name="columnNumber">Column number to hide on the worksheet</param>
            <param name="state">If true, the column will be hidden, otherwise be visible</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the column address out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetAutoFilter(System.Int32,System.Int32)">
            <summary>
            Sets the column auto filter within the defined column range
            </summary>
            <param name="startColumn">Column number with the first appearance of a auto filter drop down</param>
            <param name="endColumn">Column number with the last appearance of a auto filter drop down</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the start or end address out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetAutoFilter(System.String)">
            <summary>
            Sets the column auto filter within the defined column range
            </summary>
            <param name="range">Range to apply auto filter on. The range could be 'A1:C10' for instance. The end row will be recalculated automatically when saving the file</param>
            <exception cref="T:PicoXLSX.OutOfRangeException">Throws an OutOfRangeException if the passed range out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws an FormatException if the passed range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveAutoFilter">
            <summary>
            Removes auto filters from the worksheet
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.RecalculateAutoFilter">
            <summary>
            Method to recalculate the auto filter (columns) of this worksheet. This is an internal method. There is no need to use it. It must be public to require access from the LowLevel class
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.RecalculateColumns">
            <summary>
            Method to recalculate the collection of columns of this worksheet. This is an internal method. There is no need to use it. It must be public to require access from the LowLevel class
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSelectedCells(PicoXLSX.Cell.Range)">
            <summary>
            Sets the selected cells on this worksheet
            </summary>
            <param name="range">Cell range to select</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSelectedCells(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Sets the selected cells on this worksheet
            </summary>
            <param name="startAddress">Start address of the range</param>
            <param name="endAddress">End address of the range</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSelectedCells(System.String)">
            <summary>
            Sets the selected cells on this worksheet
            </summary>
            <param name="range">Cell range to select</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveSelectedCells">
            <summary>
            Removes the cell selection of this worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SelectedCells">
            <summary>
            Cell range of selected cells of this worksheet. Null if no cells are selected
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Columns">
            <summary>
            Dictionary of all columns with non-standard properties, like auto filter applied or a special width
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.AutoFilterRange">
            <summary>
            Range of the auto-filter. Wrapped to Nullable to provide null as value. If null, no auto-filter is applied
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.CurrentCellDirection">
            <summary>
            Direction when using AddNextCell method
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetProtectionValues">
            <summary>
            List of SheetProtectionValue. These values defines the allowed actions if the worksheet is protected
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.UseSheetProtection">
            <summary>
            If true, the worksheet is protected
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetProtectionPassword">
            <summary>
            Gets the password used for sheet protection
            </summary>
            <see cref="M:PicoXLSX.Worksheet.SetSheetProtectionPassword(System.String)"/>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetName">
            <summary>
            Name of the worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetID">
            <summary>
            Internal ID of the sheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Cells">
            <summary>
            Cells of the worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.MergedCells">
            <summary>
            Dictionary with merged cells (only references)
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.DefaultRowHeight">
            <summary>
            Default Row height
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.DefaultColumnWidth">
            <summary>
            Default column width
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.RowHeights">
            <summary>
            Dictionary of row heights. Key is the row number (zero-based), value is a float from 0 to 409.5
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.HiddenRows">
            <summary>
            Dictionary of hidden rows.  Key is the row number (zero-based), value is a boolean. True indicates hidden, false visible.
            </summary>
            <remarks>Entries with the value false are not affecting the worksheet. These entries can be removed</remarks>
        </member>
        <member name="T:PicoXLSX.Worksheet.CellDirection">
            <summary>
            Enum to define the direction when using AddNextCell method
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.CellDirection.ColumnToColum">
            <summary>The next cell will be on the same row (A1,B1,C1...)</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.CellDirection.RowToRow">
            <summary>The next cell will be on the same column (A1,A2,A3...)</summary>
        </member>
        <member name="T:PicoXLSX.Worksheet.SheetProtectionValue">
            <summary>
            Enum to define the possible protection types when protecting a worksheet
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.objects">
            <summary>If selected, the user can edit objects if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.scenarios">
            <summary>If selected, the user can edit scenarios if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.formatCells">
            <summary>If selected, the user can Format cells if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.formatColumns">
            <summary>If selected, the user can Format columns if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.formatRows">
            <summary>If selected, the user can Format rows if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.insertColumns">
            <summary>If selected, the user can insert columns if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.insertRows">
            <summary>If selected, the user can insert rows if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.insertHyperlinks">
            <summary>If selected, the user can insert hyperlinks if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.deleteColumns">
            <summary>If selected, the user can delete columns if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.deleteRows">
            <summary>If selected, the user can delete rows if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.selectLockedCells">
            <summary>If selected, the user can select locked cells if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.sort">
            <summary>If selected, the user can sort cells if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.autoFilter">
            <summary>If selected, the user can use auto filters if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.pivotTables">
            <summary>If selected, the user can use pivot tables if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.selectUnlockedCells">
            <summary>If selected, the user can select unlocked cells if the worksheets is protected</summary>
        </member>
        <member name="T:PicoXLSX.Worksheet.Column">
            <summary>
            Class representing a column of a worksheet
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.Column.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.Column.#ctor(System.Int32)">
            <summary>
            Constructor with column number
            </summary>
            <param name="columnCoordinate">Column number (zero-based, 0 to 16383)</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.Column.#ctor(System.String)">
            <summary>
            Constructor with column address
            </summary>
            <param name="columnAddress">Column address (A to XFD)</param>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.Number">
            <summary>
            Column number (0 to 16383)
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.ColumnAddress">
            <summary>
            Column address (A to XFD)
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.Width">
            <summary>
            Width of the column
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.IsHidden">
            <summary>
            If true, the column is hidden, otherwise visible
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.HasAutoFilter">
            <summary>
            If true, the column has auto filter applied, otherwise not
            </summary>
        </member>
    </members>
</doc>
